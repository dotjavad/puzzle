{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["getIndexOf","arr","k","i","length","index","indexOf","startItems","items","arrD","rndItems","shuffle","flat","finalItems","Number","push","slice","App","useState","itemsLen","setItemsLen","fullMap","setFullMap","setItems","moves","setMoves","timer","setTimer","timerStatus","setTimerStatus","winner","setWinner","activetItem","setActivetItem","activetItemAni","setActivetItemAni","startGame","evt","nowItems","target","value","useEffect","interval","setInterval","clearInterval","handleClick","idx1","idx2","itemValue","oldItems","homeLen","emptyHome","emptyHomeValue","upHome","undefined","rightHome","downHome","leftHome","JSON","stringify","className","onClick","map","item1","item2","key","Boolean","window","location","hostname","match","ReactDOM","render","basename","pathname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31441a88.chunk.js","sourcesContent":["import shuffle from 'shuffle-array';\n\nconst getIndexOf = (arr, k) => {\n    for (var i = 0; i < arr.length; i++) {\n        var index = arr[i].indexOf(k);\n        if (index > -1) {\n            return [i, index];\n        }\n    }\n}\n\nconst startItems = (items, arrD) => {\n\n    let rndItems = shuffle(items.flat());\n    let finalItems = [];\n\n    for (let i = 0; i < rndItems.length; i += Number(arrD)) {\n        finalItems.push(rndItems.slice(i, i + Number(arrD)));\n    }\n\n    return finalItems;\n}\n\nexport { getIndexOf, startItems };","import React, { useState, useEffect } from 'react';\nimport { getIndexOf, startItems } from './helpers';\nimport './App.scss';\n\nfunction App() {\n\n  const [itemsLen, setItemsLen] = useState(4);\n  const [fullMap, setFullMap] = useState([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]]);\n  const [items, setItems] = useState(startItems(fullMap, itemsLen));\n  const [moves, setMoves] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [timerStatus, setTimerStatus] = useState(false);\n  const [winner, setWinner] = useState(false);\n  const [activetItem, setActivetItem] = useState('');\n  const [activetItemAni, setActivetItemAni] = useState('');\n\n\n  const startGame = (evt) => {\n\n    setTimer(0);\n    setMoves(0);\n    setTimerStatus(false);\n    setWinner(false);\n\n    let nowItems;\n    switch (evt.target.value) {\n      case '3':\n        nowItems = [[1, 2, 3], [4, 5, 6], [7, 8, 0]];\n        break;\n\n      case '4':\n        nowItems = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]];\n        break;\n\n      default:\n        nowItems = [[1, 2], [3, 0]];\n    }\n    setItemsLen(evt.target.value);\n    setFullMap(nowItems);\n    setItems(startItems(nowItems, evt.target.value));\n  }\n\n  const startTimer = () => {\n    setTimerStatus(true);\n  }\n\n  const resetTimer = () => {\n    setTimerStatus(false);\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (timerStatus) {\n      interval = setInterval(() => {\n        setTimer(timer => timer + 1);\n      }, 1000);\n    } else if (!timerStatus && timer !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timerStatus, timer]);\n\n  const handleClick = (evt, idx1, idx2, itemValue) => {\n\n    itemValue !== 0 && startTimer();\n\n    let oldItems = [...items];\n    const homeLen = oldItems.length - 1;\n\n    const emptyHome = getIndexOf(oldItems, 0);\n    const emptyHomeValue = oldItems[emptyHome[0]][emptyHome[1]];\n\n    const upHome = (idx1 - 1 >= 0 && idx1 - 1 <= homeLen) ? oldItems[idx1 - 1][idx2] : undefined;\n    const rightHome = (idx2 + 1 >= 0 && idx2 + 1 <= homeLen) ? oldItems[idx1][idx2 + 1] : undefined;\n    const downHome = (idx1 + 1 >= 0 && idx1 + 1 <= homeLen) ? oldItems[idx1 + 1][idx2] : undefined;\n    const leftHome = (idx2 - 1 >= 0 && idx2 - 1 <= homeLen) ? oldItems[idx1][idx2 - 1] : undefined;\n\n    if (upHome !== 'undefined' && upHome === emptyHomeValue) {\n      oldItems[idx1 - 1][idx2] = oldItems[idx1][idx2];\n      oldItems[idx1][idx2] = 0;\n      setMoves(moves + 1);\n      setActivetItem(itemValue);\n      setActivetItemAni('slideInUp');\n    }\n    if (rightHome !== 'undefined' && rightHome === emptyHomeValue) {\n      oldItems[idx1][idx2 + 1] = oldItems[idx1][idx2];\n      oldItems[idx1][idx2] = 0;\n      setMoves(moves + 1);\n      setActivetItem(itemValue);\n      setActivetItemAni('slideInLeft');\n    }\n    if (downHome !== 'undefined' && downHome === emptyHomeValue) {\n      oldItems[idx1 + 1][idx2] = oldItems[idx1][idx2];\n      oldItems[idx1][idx2] = 0;\n      setMoves(moves + 1);\n      setActivetItem(itemValue);\n      setActivetItemAni('slideInDown');\n    }\n    if (leftHome !== 'undefined' && leftHome === emptyHomeValue) {\n      oldItems[idx1][idx2 - 1] = oldItems[idx1][idx2];\n      oldItems[idx1][idx2] = 0;\n      setMoves(moves + 1);\n      setActivetItem(itemValue);\n      setActivetItemAni('slideInRight');\n    }\n\n    if (JSON.stringify(fullMap) === JSON.stringify(items)) {\n      setWinner(true);\n      resetTimer();\n    }\n\n    setItems(oldItems);\n  }\n\n  return (\n    <div className=\"App\" >\n      <div className=\"game-actions\">\n        <button value=\"2\" onClick={startGame} className=\"start-game\">2 x 2</button>\n        <button value=\"3\" onClick={startGame} className=\"start-game\">3 x 3</button>\n        <button value=\"4\" onClick={startGame} className=\"start-game\">4 x 4</button>\n      </div>\n      <nav className=\"game-bar\">\n        <div className=\"moves\"><span>Moves</span> {moves}</div>\n        {winner && <h1>You Won</h1>}\n        <div className=\"time\"><span>Time(sec)</span> {`${timer}`}</div>\n      </nav>\n      <div className={`game game${itemsLen}`}>\n\n        {\n          items.map((item1, idx1) => item1.map((item2, idx2) =>\n            <div key={`${idx1}-${idx2}`} className=\"home\">\n              {<div onClick={(evt) => handleClick(evt, idx1, idx2, item2)} className={`ball ${item2 === activetItem && `animated ${activetItemAni} `} ${winner ? 'disable-ball' : ''} ${(item2 === fullMap[idx1][idx2] && item2 !== 0) ? 'correct-ball' : ''} ${item2 === 0 ? 'no-ball' : ''}`}>{item2 !== 0 && item2}</div>}\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router basename={window.location.pathname || ''}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}